#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define NAME_LEN		30
#define OTHER_LEN		15

// 구조체 정의
typedef struct node
{
	char book[NAME_LEN];
	char author[OTHER_LEN];
	char publisher[OTHER_LEN];
	unsigned int price;
	unsigned int year;
	struct node* next;
}NODE;

NODE *head = NULL;
NODE *tail = NULL;

NODE *make()
{
	NODE *temp;

	//temp = (NODE *)calloc(1, sizeof(NODE));

	temp = (NODE *)malloc(sizeof(NODE));

	printf("도서명 : ");
	fgets(temp->book, sizeof(NAME_LEN), stdin);
	strncpy(temp->book, book, strlen(book));
	//scanf("%s", temp->book);
	printf("저자명 : ");
	fgets(temp->author, sizeof(OTHER_LEN), stdin);
	strncpy(temp->author, author, strlen(author));
	//scanf("%s", temp->author);
	printf("출판사 : ");
	fgets(temp->publisher, sizeof(OTHER_LEN), stdin);
	strncpy(temp->publisher, publisher, strlen(publisher));
	//scanf("%s", temp->publisher);
	printf("판매가 : ");
	//fgets(price, 10, stdin);
	scanf("%d", temp->price);
	printf("출간일 : ");
	//fgets(year, 10, stdin);
	scanf("%d", temp->year);
	while (getchar() != '\n');


	//memset(temp->book, 0, NAME_LEN);
	//strncpy(temp->book, book, strlen(book));
	//memset(temp->author, 0, OTHER_LEN);
	//strncpy(temp->author, author, strlen(author));
	//memset(temp->publisher, 0, OTHER_LEN);
	//strncpy(temp->publisher, publisher, strlen(publisher));
	//temp->book = book;
	//temp->author = author;
	//temp->publisher = publisher;
	temp->price = price;
	temp->year = year;

	temp->next = NULL;

	return temp;
}

int push(NODE *data)
	
{
	NODE *current = head;

	if(head == NULL){
		head = data;
	} else if(current->next == NULL) {
		head->next = data;
	} else {
		for (current = head; current->next->next != NULL; current = current->next);

		current->next = data;
	}
	return 0;
}

/*
   void lint_init()
   {
   head = (NODE*)calloc(1, sizeof(NODE));
   tail = (NODE*)calloc(1, sizeof(NODE));
   head->next = tail;
   tail->next = tail;
   }

   void d_insert(NODE *data)
   {
   printf("도서명 : ");
   fgets(book, sizeof(book), stdin);
   printf("저자명 : ");
   fgets(author, sizeof(author), stdin);
//scanf("%s", author);
printf("출판사 : ");
fgets(publisher, sizeof(publisher), stdin);
//scanf("%s", publisher);
printf("판매가 : ");
fgets(price, sizeof(price), stdin);
//scanf("%s", price);
printf("출간일 : ");
fgets(year, sizeof(year), stdin);
//scanf("%s", year);

while (getchar() != '\n');

n_insert(data);
}

void n_insert(data)
{
NODE *t;
t = (NODE*)calloc(1, sizeof(NODE));
strcpy(t->book, book);
strcpy(t->author, author);
strcpy(t->publisher, publisher);
strcpy(t->price, price);
strcpy(t->year, year);
t->next = head->next;
head->next = t;
}

void save_file()
{
FILE *fp;
fp = fopen("data.txt", "wb");

Book *t;

if (fp == NULL)
{
printf("오류\n");
return;
}
t = head->next;
while (t != NULL)
{
fwrite(t, sizeof(BOOK_LEN), 1, fp);
t = t->next;
}
fclose(fp);
}

void load_File()
{
FILE *fp;
fp = fopen("BOOK.DBF", "rb");

Book *p;
Book *s;

if (fp == NULL)
{
	printf(" 오류 \n");
	return;
}

p = head->next;
while (p != tail)
{
	s = p;
	p = p->next;
	free(s);
}

head->next = tail; // head를 tail과 연결 시켜 준다.
while (1)
{
	p = (Book*)calloc(1, sizeof(Book));
	if (!fread(p, sizeof(BOOK_LEN), 1, fp))    // EOF까지 구조체를 읽어들이면서 node를 추가한다.
	{
		free(p);
		break;
	}
	p->next = head->next;
	head->next = p;
}
fclose(fp);
}

void Display()
{
}
*/

int free_all()
{
	NODE *next;

	while(1) {
		if(head->next != NULL) {
			next = head->next;
		} else {
			free(head);
			head = NULL;
			break;
		}

		free(head);

		head = next;
	}

	return 0;
}

int main()
{
	int num = 0;
	NODE *temp;
	while (1) {
		printf("[ Menu ]\n");
		printf("1. 도서 입력\n");
		printf("2. 도서 확인\n");
		printf("3. 종료\n");
		printf("4. txt 출력\n");
		printf("--------------\n");
		printf("선택(1 ~ 4) : ");

		scanf("%d", &num);

		printf("\n");
		temp = make();
		if (num == 3) {
			break;
		} else if (num == 1) {
			push(temp);
		} else if (num == 2) {

		} else if (num == 4) {

		}
		while (getchar() != '\n');
		printf("\n");
	}
	free_all();
	return 0;
}
